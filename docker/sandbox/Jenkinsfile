// TODO
// 1. Sandbox properties have to be moved to Jenkins Pipeline parameters

def sandbox = "sandbox-sus2"
def environment = "sandbox"
def datacenter = "sjc"

def kubectlImage = "artifactory.wikia-inc.com/ops/k8s-deployer:0.0.14"
def nginxImage = "artifactory.wikia-inc.com/sus/mediawiki-sandbox-nginx"
def mediawikiImage = "artifactory.wikia-inc.com/sus/mediawiki-sandbox-php"

def render(String template, java.util.LinkedHashMap binding) {
    def engine = new groovy.text.SimpleTemplateEngine()

    return engine.createTemplate(template).make(binding).toString()
}

node("docker-daemon") {
    def appHash
    def configHash
    def imageExists = false
    def imageTag

    stage("Clone repositories") {
        sh('pwd')

        dir("app") {
            git url: "git@github.com:Wikia/app.git",
                branch: params.app_branch,
                credentialsId: "bd3cf712-39a7-4b16-979e-ff86208ab2ea"

            appHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            println("Wikia/app commit: $appHash")
        }

        dir("config") {
            git url: "git@github.com:Wikia/config.git",
                branch: params.config_branch,
                credentialsId: "bd3cf712-39a7-4b16-979e-ff86208ab2ea"

            configHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            println("Wikia/config commit: $configHash")
        }

        sh("rm -rf cache && mkdir cache")

        imageTag = "$appHash.$configHash"

        println("Image tag: $imageTag")
    }

    stage("Bump cachebuster and version") {
        dir("app") {
            sh('echo "<?php\n\\\$wgStyleVersion = "$(date +%s)";" > wgStyleVersion.php')
            sh('echo "' + params.app_branch + '@$appHash" > wikia.version.txt')
        }

        dir("config") {
            sh('echo "' + params.config_branch + '@$configHash" > wikia.version.txt')
        }
    }

    stage("Build and push images") {
        dir("app") {
            sh("docker build  . -f docker/sandbox/Dockerfile-nginx -t $nginxImage:$imageTag")
            sh("docker build .. -f docker/sandbox/Dockerfile-php -t $mediawikiImage:$imageTag")

            sh("docker push $nginxImage:$imageTag")
            sh("docker push $mediawikiImage:$imageTag")
        }
    }

    stage("Apply new k8s descriptor") {
        dir("app") {
            def template = sh(script: 'cat docker/sandbox/sandbox.template.yaml', returnStdout: true)
            def k8s = render(template, [
                'IMAGE_TAG': imageTag,
                'SANDBOX_NAME': sandbox,
                'SANDBOX_ENVIRONMENT': environment,
                'SANDBOX_DATACENTER': datacenter
            ])

            sh("""cat > docker/sandbox/k8s.yaml <<EOL
${k8s}
EOL""")

            sh("cat docker/sandbox/k8s.yaml")
        }

        withDockerContainer(kubectlImage) {
            /*
            sh """#!/bin/sh
            kubectl --context kube-sjc-prod -n prod delete -f app/docker/sandbox/${sandbox}.yaml
            kubectl --context kube-sjc-prod -n prod apply -f app/docker/sandbox/${sandbox}.yaml"""
            */
        }
    }
}
