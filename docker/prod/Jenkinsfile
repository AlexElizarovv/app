def kubectlImage = "artifactory.wikia-inc.com/ops/k8s-deployer:0.0.15"
def nginxImage = "artifactory.wikia-inc.com/sus/mediawiki-prod-nginx"
def mediawikiImage = "artifactory.wikia-inc.com/sus/mediawiki-php"
def loggerImage = "artifactory.wikia-inc.com/sus/mediawiki-logger"

def rolloutStatusSjc = 1
def rolloutStatusRes = 1

def render(String template, java.util.LinkedHashMap binding) {
  def engine = new groovy.text.SimpleTemplateEngine()

  return engine.createTemplate(template).make(binding).toString()
}

// prevVersion - e.g. 220.001
def bump_minor(String prevVersion) {
  prevReleaseTokens = prevVersion.tokenize('.')
  prevMajorVersion = prevReleaseTokens[0]
  prevMinorVersion = prevReleaseTokens[1].replaceFirst("^0*", "")

  nextMinorVersion = (prevMinorVersion.toInteger() + 1).toString().padLeft(3, '0')

  return "${prevMajorVersion}.${nextMinorVersion}"
}

// Creates new tag if some commits were made to a release branch
// e.g. currentBranch - release-220
def createTag(String currentBranch) {
  // e.g release-220.005
  def currentLatestTag = sh(script: "git describe --abbrev=0", returnStdout: true).trim()
  println("Current latest tag: ${currentLatestTag}")

  if (params.source == 'hotfix') {
    def anyNewCommits = sh(script: "git log HEAD...${currentLatestTag}", returnStdout: true).trim()
    println(anyNewCommits)

    if (anyNewCommits.isEmpty()) {
      // no new commits
      println("No new commits - redeploy: ${currentLatestTag}")

      return currentLatestTag
    } else {
      def latestCommitOnCurrentRelease = sh(
        script: "git show-ref ${currentBranch} -s",
        returnStdout: true
      ).trim()
      //e.g. release-220.002
      def latestTagOnCurrentRelease = sh(
        script: "git describe ${latestCommitOnCurrentRelease}",
        returnStdout: true
      ).trim()
      def prevVersion = latestTagOnCurrentRelease.replace('release-', '')
      //e.g. release-220.003
      def newTag = "release-" + bump_minor(prevVersion)

      doesTagExist = sh(script: "git tag --list ${newTag}", returnStdout: true).trim()

      if (doesTagExist.isEmpty()) {
        println("Creating ${newTag} tag")
        //TODO: Uncomment
        //sshagent(['bd3cf712-39a7-4b16-979e-ff86208ab2ea']) {
        //  sh(script: "git tag --annotate --message ${newTag} ${newTag}")
        //  sh(script: "git push origin ${newTag}")
        //}
      } else {
        println("Tag ${newTag} already exists")
      }

      return newTag
    }
  } else {
    println("Releasing a tag from preview - skip creating a new tag")
  }

  return currentLatestTag
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "!!K8S (mirror deploy)!!: *${buildStatus}*: <${env.BUILD_URL}|${env.JOB_NAME}. Build #${env.BUILD_NUMBER}>"
  def summary = "${subject}"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'BLUE'
    colorCode = '#70CADB'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#7AF371'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
    summary = summary + " <!here>"
  }

  // Send notifications
  // slackSend (channel: '#release-progress', color: colorCode, failOnError: true, message: summary)
  println("Sending slack msg to #release-progress: ${summary}")
}

stage('Slack notify start') {
  notifyBuild('STARTED')
}

node("docker-daemon") {
  def currentAppBranch
  def currentConfigBranch
  def currentAppTag
  def currentConfigTag

  def nextAppBranch
  def nextConfigBranch
  def nextAppTag
  def nextConfigTag

  def buildUser = "Anonymous"
  def appHash
  def configHash
  def imageTag

  def appBranch
  def configBranch

  wrap([$class: 'BuildUser']) {
    try {
      buildUser = "${BUILD_USER}"
    } catch (MissingPropertyException ex) {
      buildUser = "Jenkins"
    }
  }

  try {
    stage('Fetch version') {
      parallel (
        "preview": {
          // when source=preview fetch version from preview
          if (params.source == 'preview') {
            withDockerContainer(kubectlImage) {
              previewDeploymentInfo = sh(
                script: "kubectl --context kube-sjc-prod -n prod get deployments -l app=mediawiki-preview -o jsonpath='{.items[0].spec.template.metadata.labels}'",
                returnStdout: true
              )
            }

            //e.g. release-230.001
            nextAppTag = sh(
              script: "echo \"${previewDeploymentInfo}\" | sed 's/.*app_version:\\([^] ]*\\).*/\\1/'",
              returnStdout: true
            ).trim()
            nextConfigTag = sh(
              script: "echo \"${previewDeploymentInfo}\" | sed 's/.*config_version:\\([^] ]*\\).*/\\1/'",
              returnStdout: true
            ).trim()

            println("nextAppTag: ${nextAppTag}, nextConfigTag: ${nextConfigTag}")

            //e.g release-230
            nextAppBranch = nextAppTag.tokenize('.')[0]
            nextConfigBranch = nextConfigTag.tokenize('.')[0]
          }
        },
        "prod": {
          withDockerContainer(kubectlImage) {
            currentDeploymentInfo = sh(
              script: "kubectl --context kube-sjc-prod -n prod get deployments -l app=mediawiki-prod -o jsonpath='{.items[0].spec.template.metadata.labels}'",
              returnStdout: true
            )
          }

          //e.g release-229.001
          currentAppTag = sh(
            script: "echo \"${currentDeploymentInfo}\" | sed 's/.*app_version:\\([^] ]*\\).*/\\1/'",
            returnStdout: true
          ).trim()
          currentConfigTag = sh(
            script: "echo \"${currentDeploymentInfo}\" | sed 's/.*config_version:\\([^] ]*\\).*/\\1/'",
            returnStdout: true
          ).trim()

          println("currentAppTag: ${currentAppTag}, currentConfigTag: ${currentConfigTag}")

          //e.g release-229
          currentAppBranch = currentAppTag.tokenize('.')[0]
          currentConfigBranch = currentConfigTag.tokenize('.')[0]
        }
      )
    }

    stage("Clone repositories") {
      if (params.source == 'preview') {
        // when releasing what is currently on preview
        // checkout a tag instead of a branch
        appBranch = nextAppBranch
        configBranch = nextConfigBranch
      } else {
        // when releasing a hot fix
        // checkout a current branch that is on prod
        // so we'll be able to create new tag if necessary
        appBranch = currentAppBranch
        configBranch = currentConfigBranch
      }

      println("App branch: ${appBranch}")
      println("Config branch: ${configBranch}")

      parallel (
        "app": {
          dir("app") {
            git url: "git@github.com:Wikia/app.git",
                branch: 'SUS-5787',
                credentialsId: "bd3cf712-39a7-4b16-979e-ff86208ab2ea"

            nextAppTag = createTag(appBranch)
            appHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            println("Wikia/app commit: $appHash")
          }
        },
        "config": {
          dir("config") {
            git url: "git@github.com:Wikia/config.git",
                branch: configBranch,
                credentialsId: "bd3cf712-39a7-4b16-979e-ff86208ab2ea"

            nextConfigTag = createTag(configBranch)
            configHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            println("Wikia/config commit: $configHash")
          }
        }
      )

      imageTag = "$appHash.$configHash"

      println("Image tag: $imageTag")
      println("App Tag: $nextAppTag")
      println("Config Tag: $nextConfigTag")
    }

    stage("Prompt for a version") {
      if (params.force != true) {
        timeout(time: 120, unit: 'SECONDS') {
          userInput = input(
            id: 'version_check',
            message: "Updating\napp - ${currentAppTag} ==> ${nextAppTag} \nconfig - ${currentConfigTag} ==> ${nextConfigTag}"
          )
        }
      }
    }

    stage("Bump cachebuster and version") {
      parallel (
        "app": {
          dir("app") {
            def cacheBuster = new Date().getTime()

            sh('echo "<?php\n\\\$wgStyleVersion = ' + cacheBuster + ';" > wgStyleVersion.php')
            sh('echo "' + appBranch + '@' + appHash + '" > wikia.version.txt')
          }
        },
        "config": {
          dir("config") {
            sh('echo "' + configBranch + '@' + configHash + '" > wikia.version.txt')
          }
        }
      )
    }

    parallel (
      "php": {
        stage("Build and push php image") {
          dir("app") {
            def imageExists = false
            def status = sh(script: """
              curl -u ${env.JENKINS_ARTIFACTORY_USERNAME}:${env.JENKINS_ARTIFACTORY_PASSWORD} \
              -w "%{http_code}" -s -I -o /dev/null \
              -XGET "https://artifactory.wikia-inc.com/artifactory/api/storage/dockerv2-local/sus/mediawiki-php/${imageTag}"
            """, returnStdout: true).trim()

            if (status == "200") {
              imageExists = true
            }

            if (!imageExists) {
              // SUS-5284 - make the image a bit smaller
              sh("cp docker/.dockerignore ..")
              sh("docker build .. -f docker/base/Dockerfile-php -t $mediawikiImage:$imageTag")
              sh("docker push $mediawikiImage:$imageTag")
            } else {
              println("Php image tag ($imageTag) already exists")
            }
          }
        }
      },
      "nginx": {
        stage("Build and push nginx image") {
          dir("app") {
            def imageExists = false
            def status = sh(script: """
              curl -u ${env.JENKINS_ARTIFACTORY_USERNAME}:${env.JENKINS_ARTIFACTORY_PASSWORD} \
              -w "%{http_code}" -s -I -o /dev/null \
              -XGET "https://artifactory.wikia-inc.com/artifactory/api/storage/dockerv2-local/sus/mediawiki-prod-nginx/${imageTag}"
            """, returnStdout: true).trim()

            if (status == "200") {
              imageExists = true
            }

            if (!imageExists) {
              // SUS-5284 - make the image a bit smaller
              sh("cp docker/.dockerignore ..")
              sh("docker build . -f docker/prod/Dockerfile-nginx -t $nginxImage:$imageTag")
              sh("docker push $nginxImage:$imageTag")
            } else {
              println("Nginx image tag ($imageTag) already exists")
            }
          }
        }
      }
    )

    stage("Apply new k8s descriptor") {
      dir("app") {
        def template = sh(script: 'cat docker/prod/prod.template.yaml', returnStdout: true)

        withDockerContainer(kubectlImage) {
          parallel (
            "sjc": {
              def sjc = render(template, [
                'IMAGE_TAG': imageTag,
                'DATACENTER': 'sjc',
                'APP_VERSION': nextAppTag,
                'CONFIG_VERSION': nextConfigTag
              ])

              sh("""cat > docker/prod/sjc.yaml <<EOL
${sjc}
EOL""")
              sh("cat docker/prod/sjc.yaml")
              // deploy to SJC
              //TODO: Uncomment
              // sh "kubectl --context kube-sjc-prod -n prod apply -f app/docker/prod/sjc.yaml"
              // rolloutStatusSjc = sh(returnStatus: true, script: "kubectl --context kube-sjc-prod -n prod rollout status deployment/mediawiki-prod")
            },
            "res": {
              def res = render(template, [
                'IMAGE_TAG': imageTag,
                'DATACENTER': 'res',
                'APP_VERSION': nextAppTag,
                'CONFIG_VERSION': nextConfigTag
              ])

              sh("""cat > docker/prod/res.yaml <<EOL
${res}
EOL""")

              sh("cat docker/prod/res.yaml")
              // deploy to RES
              //TODO: Uncomment
              // sh "kubectl --context kube-res-prod -n prod apply -f app/docker/prod/res.yaml"
              // rolloutStatusRes = sh(returnStatus: true, script: "kubectl --context kube-res-prod -n prod rollout status deployment/mediawiki-prod")
            }
          )
        }
      }
    }

    stage("Apply cron jobs") {
      dir("app") {
        // SUS-5531 - apply cron jobs via auto-generated YAML file
        sh("cd docker/maintenance && bash cronjobs-generator.sh ${imageTag} > ../prod/k8s-cronjobs.yaml")
        sh("cat docker/prod/k8s-cronjobs.yaml")
      }

      withDockerContainer(kubectlImage) {
        // cron jobs only run on SJC
        //TODO: Uncomment
        // sh "kubectl --context kube-sjc-prod -n prod apply -f app/docker/prod/k8s-cronjobs.yaml"
      }
    }

    stage('Tag Jira tickets') {
      //TODO: Uncomment
      // build job: 'tag-jira-tickets',
      //   parameters: [
      //     string(name: 'app_name', value: 'app'),
      //     string(name: 'env', value: 'prod'),
      //     string(name: 'previous_release', value: currentAppVersion),
      //     string(name: 'current_release', value: nextAppVersion),
      //     [$class: 'LabelParameterValue', name: 'node', label: 'linux']
      //   ],
      //   wait: false
    }

    stage('Trigger tests') {
        //TODO: Uncomment
      // build job: 'app-prod-push-event',
      //   parameters: [
      //     string(name: 'release', value: nextAppVersion),
      //     string(name: 'datacenter', value: 'sjc')
      //   ],
      //   wait: false
    }

  } catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
  } finally {
    stage('Set and report job status') {
      if (rolloutStatusSjc != 0 || rolloutStatusRes != 0) {
        currentBuild.result = "UNSTABLE"
      }

      notifyBuild(currentBuild.result)
    }
  }
}
