<?php
/**
 * UnifiedSearchApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * unified-search
 *
 * OpenAPI spec version: unified-search-20190429-112916-c14dd7c-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\UnifiedSearch\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * UnifiedSearchApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnifiedSearchApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/unified-search');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return UnifiedSearchApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation specialSearch
     *
     * Search method for MW's Special:Search
     *
     * @param string $query Query (required)
     * @param string $language_code Language code (required)
     * @param int $wiki_id ID of the particular Wiki to search (required)
     * @param int[] $namespace Particular namespaces to search (required)
     * @param int $page Page of the results to get (optional, default to 0)
     * @param int $limit Results per page in the response (optional, default to 100)
     * @param bool $image_only Query images only, used in combination of the File namespace (optional, default to false)
     * @param bool $video_only Query videos only, used in combination of the File namespace (optional, default to true)
     * @return \Swagger\Client\UnifiedSearch\Models\SpecialSearchResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function specialSearch($query, $language_code, $wiki_id, $namespace, $page = null, $limit = null, $image_only = null, $video_only = null)
    {
        list($response) = $this->specialSearchWithHttpInfo($query, $language_code, $wiki_id, $namespace, $page, $limit, $image_only, $video_only);
        return $response;
    }

    /**
     * Operation specialSearchWithHttpInfo
     *
     * Search method for MW's Special:Search
     *
     * @param string $query Query (required)
     * @param string $language_code Language code (required)
     * @param int $wiki_id ID of the particular Wiki to search (required)
     * @param int[] $namespace Particular namespaces to search (required)
     * @param int $page Page of the results to get (optional, default to 0)
     * @param int $limit Results per page in the response (optional, default to 100)
     * @param bool $image_only Query images only, used in combination of the File namespace (optional, default to false)
     * @param bool $video_only Query videos only, used in combination of the File namespace (optional, default to true)
     * @return Array of \Swagger\Client\UnifiedSearch\Models\SpecialSearchResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function specialSearchWithHttpInfo($query, $language_code, $wiki_id, $namespace, $page = null, $limit = null, $image_only = null, $video_only = null)
    {
        // verify the required parameter 'query' is set
        if ($query === null) {
            throw new \InvalidArgumentException('Missing the required parameter $query when calling specialSearch');
        }
        // verify the required parameter 'language_code' is set
        if ($language_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $language_code when calling specialSearch');
        }
        // verify the required parameter 'wiki_id' is set
        if ($wiki_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wiki_id when calling specialSearch');
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null) {
            throw new \InvalidArgumentException('Missing the required parameter $namespace when calling specialSearch');
        }
        // parse inputs
        $resourcePath = "/special-search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // query params
        if ($language_code !== null) {
            $queryParams['languageCode'] = $this->apiClient->getSerializer()->toQueryValue($language_code);
        }
        // query params
        if ($wiki_id !== null) {
            $queryParams['wikiId'] = $this->apiClient->getSerializer()->toQueryValue($wiki_id);
        }
        // query params
        if (is_array($namespace)) {
            $namespace = $this->apiClient->getSerializer()->serializeCollection($namespace, 'multi', true);
        }
        if ($namespace !== null) {
            $queryParams['namespace'] = $this->apiClient->getSerializer()->toQueryValue($namespace);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($image_only !== null) {
            $queryParams['imageOnly'] = $this->apiClient->getSerializer()->toQueryValue($image_only);
        }
        // query params
        if ($video_only !== null) {
            $queryParams['videoOnly'] = $this->apiClient->getSerializer()->toQueryValue($video_only);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\UnifiedSearch\Models\SpecialSearchResult',
                '/special-search'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\UnifiedSearch\Models\SpecialSearchResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\UnifiedSearch\Models\SpecialSearchResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
